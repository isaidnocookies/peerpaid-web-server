#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('peerpaid-server:server');
var http = require('http');

var config = require('config')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.get("server.port") || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);





var server = http.createServer(app).listen(port, "localhost", function() {
  console.log('Started Peerpaid-Server on: ' + port);
});


//var socketio = require('socket.io')(server,);

var io = global.io = require('socket.io').listen(server
//  ,{path:"/socket.io"}
);


global.io.use(function(socket, next){
  next();

});

var socket = require('../routes/socket');
global.io.sockets.on('connection', socket.connection);

global.io.set('authorization', function (handshake, callback) {
  //console.log("Authorization:", handshake)
  callback(null, true);
});




/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  console.log("!!!!!!! ERROR !!!!!!!!!\n", error)
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('peerpaid-web-server Listening on ' + bind);
}
